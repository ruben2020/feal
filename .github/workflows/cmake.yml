# Heavily inspired (i.e. copy/paste) from https://gist.github.com/NickNaso/0d478f1481686d5bcc868cac06620a60
name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: 
  push:
  pull_request:
  release:
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Ubuntu-latest GCC",
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
          }
        - {
            name: "Ubuntu-latest Clang",
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++"
          }
        - {
            name: "Windows MinGW",
            os: windows-latest,
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++"
          }
#        - {
#            name: "macOS Clang",
#            os: macos-latest,
#            build_type: "Debug",
#            cc: "clang",
#            cxx: "clang++"
#          }
#        - {
#            name: "FreeBSD Clang",
#            os: macos-10.15,
#            build_type: "Debug",
#            cc: "clang",
#            cxx: "clang++"
#          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on Ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu-latest')
        run: |
          sudo apt-get update
          sudo apt-get install build-essential g++ clang git cmake ninja-build
          uname -a
          lsb_release -a
          gcc -v && g++ -v
          clang -v && clang++ -v
          cmake --version && ninja --version

      - name: Install dependencies on macOS
        if: startsWith(matrix.config.name, 'macOS Clang')
        run: |
          brew install cmake
          clang -v
          cmake --version
          ninja --version

      - name: Install ninja on Windows
        if: startsWith(matrix.config.name, 'Windows MinGW')
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install dependencies on FreeBSD
        if: contains(matrix.config.name, 'FreeBSD')
        uses: vmactions/freebsd-vm@v0.1.5
        with:
          usesh: true
          prepare: pkg install -y ninja cmake llvm
          run: |
            pwd
            ls -lah
            whoami
            env
            freebsd-version
            clang -v && clang++ -v
            cmake --version && ninja --version

      - name: Configure CMake and Build with Clang
        if: contains(matrix.config.name, 'Clang')
        run: |
          mkdir -p build
          cd build
          export CC=clang
          export CXX=clang++
          cmake -G "Unix Makefiles" ..
          make
     
      - name: Configure CMake and Build with GCC
        if: ${{ !contains(matrix.config.name, 'Clang') }}
        run: |
          mkdir -p build
          cd build
          cmake -G Ninja ..
          ninja

      - name: Run some examples
        if: startsWith(matrix.config.name, 'Windows MinGW')
        run: |
          cd
          cd examples
          cd promise
          fealpromise.exe

      - name: Run some examples
        if: ${{ !startsWith(matrix.config.name, 'Windows MinGW') }}
        run: |
          pwd
          cd examples
          cd promise
          ./fealpromise
